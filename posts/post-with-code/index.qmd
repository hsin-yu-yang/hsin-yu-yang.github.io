---
title: "Machine Learning Algorithms: Linear Regression"
author: "Ella Yang"
date: "2023-10-23"
categories: [news, code, analysis]
image: "image.jpg"
---

In this plot, we will apply the linear regression algorithm to predict the final grades of high school students in a math class based on various attributes. The data used for this analysis is extracted from the Student Performance dataset available at the [ UCI Machine Learning Repository](http://archive.ics.uci.edu/dataset/320/student+performance)

## Importing Modules/Packages
Before diving into coding, we import the required modules and packages:

```{python}
import pandas as pd
import numpy as np
import sklearn
from sklearn import linear_model
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
from matplotlib import style
import pickle
```

## Loading in Our Data
Next, we load the dataset and display the first 5 students using the $.head()$ function

```{python}
data =pd.read_csv("/Users/ella.yang/Desktop/ds499/hsin-yu-yang.github.io/data/student_mat.csv", sep=";")
#print(data.head())
```

## Trimming Our Data
Considering the relevance of attributes, we select the ones we want to use, resulting in a data frame with information related to only 6 attributes:

```{python}
data = data[["G1", "G2", "G3", "studytime", "failures", "absences"]]
#Compare to the original data
print(data.head())
```

## Separating Our Data
Now that we've trimmed our data set down we need to separate it into 4 arrays. However, before we can do that we need to define what attribute we are trying to predict. This attribute is known as a label. The other attributes that will determine our label are known as features. Once we've done this we will use numpy to create two arrays. One that contains all of our features and one that contains our labels

```{python}
predict = "G3"
X = np.array(data.drop(columns=[predict]))  # return new dataset without G3
y = np.array(data[predict])
```

After this we need to split our data into testing and training data. We will use 90% of our data to train and the other 10% to test. The reason we do this is so that we do not test our model on data that it has already seen.

```{python}
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.1)
```

We are ready to implement the linear regression algorithm

## How Does it Work?
Linear Regression is like drawing a line through a group of points on a graph to represent their overall trend. Imagine you have some points scattered on a graph, and you want to draw a line that best fits through them.

This line is defined by an equation: $y = m*x + b$. Here, $m$ is like the steepness of the line, telling you how much the y (up and down) value changes when x (left and right) changes. And $b$ is where the line crosses the y-axis.

To figure out the steepness ($m$) of the line, you choose two points on the line and use a formula: $m = (y2 - y1) / (x2 - x1)$. This helps in calculating how much the line slopes.

Once the computer figures out this line, it can use it to make predictions for other points.

Remember, the examples we talked about are like drawing lines in two-dimensional space. In real situations, lines might go in more than just left-right and up-down directions, and that's when you get multiple slope values.

## Implementing the Algorithm
Let's use the algorithm to predict students' final grades. We'll start by defining the model we'll use

```{python}
linear = linear_model.LinearRegression()
```

After defining our model, we'll train and score it using the arrays we created earlier. We'll assess how well our algorithm performed on our test data by measuring R-squared

```{python}
linear.fit(x_train, y_train)
acc = linear.score(x_test, y_test) #R-squared of the model
print(acc) #a score of above 80% is fairly good
```

## Viewing The Constants
Now, let's take a look at the constants used to generate the line

```{python}
print('Coefficient: \n', linear.coef_) # These are each slope value
print('Intercept: \n', linear.intercept_) # This is the intercept
```

## Predicting on Specific Students
While seeing a score value is interesting, let's see how well our algorithm works on specific students. We'll print out all of our test data, along with the actual final grade and our model's predicted grade

```{python}
predictions = linear.predict(x_test) # Gets a list of all predictions

#for x in range(len(predictions)):
    #print(predictions[x], x_test[x], y_test[x])#input data(x_test[x]), actual value for final grade (y_test[x])
#"G1", "G2", "G3", "studytime", "failures", "absences"
```

![Output](o.jpeg) 

## Saving Our Model
We'll write it to a new file using $pickle.dump()$ to save our model

```{python}
with open("studentgrades.pickle", "wb") as f:
    pickle.dump(linear, f)

# linear is the name of the model we created before
# it should be defined above this
```

## Loading Our Model
Now, let's remove the code that creates and trains our model as we're simply loading in an existing one from our pickle file

```{python}
pickle_in = open("studentgrades.pickle", "rb")
linear = pickle.load(pickle_in)

# Now we can use linear to predict grades like before
```

## Training Multiple Models
If you've noticed that our models show different levels of R-squared, it's because each time we divide the data into training and testing sets, it's done in a unique way. Given that our model trains quite swiftly, it might be beneficial to train several models and keep the best-performing one


```{python}
# TRAIN MODEL MULTIPLE TIMES FOR BEST SCORE
best = 0
for _ in range(20):
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.1)

    linear = linear_model.LinearRegression()

    linear.fit(x_train, y_train)
    acc = linear.score(x_test, y_test)
    print("Accuracy: " + str(acc))
    
    # If the current model has a better score than one we've already trained then save it
    if acc > best:
        best = acc
        with open("studentgrades.pickle", "wb") as f:
            pickle.dump(linear, f)
            # linear is the name of the model we created before
```

## Plotting Our Data
To visually understand our data, we'll create plots using the matplotlib library. We'll use a scatter plot to present our data

```{python}
# Drawing and plotting model
plot = "absences" # Change this to G1, G2, studytime or absences to see other graphs
plt.scatter(data[plot], data["G3"]) 
plt.legend(loc=4)
plt.xlabel(plot)
plt.ylabel("Final Grade")
plt.show()
```